import { useState } from "react";
import { CheckCircle, AlertTriangle, Clock, Info, AlertCircle } from "lucide-react";
import { Button } from "../ui/button";
import { DetectionResult as DetectionResultType } from "../../data/sampleDetectionResults";

interface DetectionResultProps {
  result: DetectionResultType;
  mediaType: string;
  preview: string | null;
  text?: string; // Text is optional
}

const DetectionResult = ({ result, mediaType }: DetectionResultProps) => {
  const [showDetails, setShowDetails] = useState(false);
  
  if (!result) return null;
  
  const { isDeepfake, confidence, processingTime, details } = result;
  
  // Check if this is an API error response based on details
  const isApiError = details && (details.apiError === true || details.status === "failed");
  
  // Format confidence as percentage
  const confidencePercent = confidence ? confidence.toFixed(2) : "0.00";
  
  // Format processing time
  const formattedTime = processingTime 
    ? `${(processingTime / 1000).toFixed(2)} seconds` 
    : "N/A";
  
  // Determine result status color and icon
  const getStatusInfo = () => {
    // Handle API error case
    if (isApiError) {
      return {
        icon: <AlertCircle className="h-8 w-8 text-red-500" />,
        color: "bg-red-100 dark:bg-red-900/30 border-red-300 dark:border-red-700",
        textColor: "text-red-800 dark:text-red-300",
        title: "API Error Occurred",
        message: details.errorMessage || "There was an error processing your request with the AI detection API.",
      };
    }
    
    // Normal result cases (deepfake or authentic)
    if (isDeepfake) {
      return {
        icon: <AlertTriangle className="h-8 w-8 text-yellow-500" />,
        color: "bg-yellow-100 dark:bg-yellow-900/30 border-yellow-300 dark:border-yellow-700",
        textColor: "text-yellow-800 dark:text-yellow-300",
        title: mediaType === "text" ? "AI-Generated Content Detected" : "Deepfake Detected",
        message: mediaType === "text" 
          ? "This text was likely generated by AI."
          : `This ${mediaType} appears to be manipulated.`,
      };
    } else {
      return {
        icon: <CheckCircle className="h-8 w-8 text-green-500" />,
        color: "bg-green-100 dark:bg-green-900/30 border-green-300 dark:border-green-700",
        textColor: "text-green-800 dark:text-green-300",
        title: "Likely Authentic",
        message: mediaType === "text" 
          ? "This text was likely written by a human."
          : `This ${mediaType} appears to be authentic.`,
      };
    }
  };
  
  const statusInfo = getStatusInfo();
  
  return (
    <div className="mt-8 space-y-6">
      <h3 className="text-xl font-semibold">Analysis Results</h3>
      
      <div className={`p-6 rounded-lg border ${statusInfo.color}`}>
        <div className="flex items-start space-x-4">
          <div className="flex-shrink-0">
            {statusInfo.icon}
          </div>
          <div className="flex-1">
            <h4 className={`text-lg font-bold ${statusInfo.textColor}`}>
              {statusInfo.title}
            </h4>
            <p className="mt-1 text-gray-600 dark:text-gray-300">
              {statusInfo.message}
            </p>
            {isApiError && details?.suggestion && (
              <p className="mt-2 text-gray-600 dark:text-gray-300 italic">
                {details.suggestion}
              </p>
            )}
            <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
              {!isApiError && (
                <>
                  <div className="bg-white dark:bg-gray-800 p-3 rounded-md shadow-sm">
                    <div className="flex items-center space-x-2">
                      <Info className="h-4 w-4 text-blue-500" />
                      <span className="text-sm text-gray-500 dark:text-gray-400">Confidence</span>
                    </div>
                    <p className="text-lg font-medium mt-1">{confidencePercent}%</p>
                  </div>
                  <div className="bg-white dark:bg-gray-800 p-3 rounded-md shadow-sm">
                    <div className="flex items-center space-x-2">
                      <Clock className="h-4 w-4 text-blue-500" />
                      <span className="text-sm text-gray-500 dark:text-gray-400">Processing Time</span>
                    </div>
                    <p className="text-lg font-medium mt-1">{formattedTime}</p>
                  </div>
                </>
              )}
            </div>
            <div className="mt-4">
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => setShowDetails(!showDetails)}
              >
                {showDetails ? "Hide Details" : "Show Details"}
              </Button>
            </div>
          </div>
        </div>
      </div>
      
      {showDetails && details && (
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg border border-gray-200 dark:border-gray-700">
          <h4 className="text-lg font-semibold mb-4">
            {isApiError ? "Error Details" : "Analysis Details"}
          </h4>
          <div className="space-y-4">
            {Object.entries(details).map(([key, value]) => {
              // Skip certain technical fields
              if (key === "analysisTimestamp" || key === "apiError" || key === "status") return null;
              
              // Format key for display
              const formattedKey = key
                .replace(/([A-Z])/g, ' $1')
                .replace(/^./, str => str.toUpperCase());
              
              // Format value based on type
              let formattedValue = value;
              if (typeof value === 'number') {
                formattedValue = value.toFixed(2);
              }
              
              return (
                <div key={key} className="grid grid-cols-2 gap-4 border-b border-gray-100 dark:border-gray-700 pb-2">
                  <div className="text-gray-600 dark:text-gray-400">{formattedKey}</div>
                  <div className="font-medium">{String(formattedValue)}</div>
                </div>
              );
            })}
            {details.analysisTimestamp && (
              <div className="grid grid-cols-2 gap-4 border-b border-gray-100 dark:border-gray-700 pb-2">
                <div className="text-gray-600 dark:text-gray-400">Analysis Timestamp</div>
                <div className="font-medium">
                  {new Date(details.analysisTimestamp).toLocaleString()}
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default DetectionResult; 